name: .NET Core CI/CD

on:
  push:
    branches:
      - master
      - main

permissions:
  checks: write
  pull-requests: write

env:
  DOTNET_VERSION: 9.x
  SCANNER_VERSION: 10.x
  BUILD_CONFIG: Release

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      build_config: Release
    
    permissions:
      contents: read
      checks: write
      pull-requests: write

    steps:
    - uses: actions/checkout@v4
      name: Checkout
      with:
        # Disabling shallow clones is recommended for improving the relevancy of reporting
        fetch-depth: 0

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: .NET Restore
      run:  dotnet restore

    # - name: Install Tools
    #   run: | 
          # dotnet tool install --global dotnet-sonarscanner
          # dotnet tool install --global dotnet-coverage
          # dotnet sonarscanner begin /o:${{ secrets.SONAR_ORGANIZATION }} /k:${{ secrets.SONAR_PROJECT_KEY }} /d:sonar.token=${{ secrets.SONAR_TOKEN }} /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
    
    - name: .NET Build
      run: dotnet build --configuration $BUILD_CONFIG --no-restore
    
    - name: .NET Test with Coverage
      run: dotnet test --configuration $BUILD_CONFIG --no-build --logger trx --collect:"XPlat Code Coverage" 

    # - name: Collect Data
    #   run: dotnet-coverage collect "dotnet test" -f xml -o "coverage.xml"
    
    - name: Combine Coverage Reports # This is because one report is produced per project, and we want one result for all of them.
      uses: danielpalme/ReportGenerator-GitHub-Action@5
      with:
        reports: "**/*.cobertura.xml" # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
        targetdir: "${{ github.workspace }}" # REQUIRED # The directory where the generated report should be saved.
        reporttypes: "Cobertura" # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, CsvSummary, Html, Html_Dark, Html_Light, Html_BlueRed, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlInline_AzurePipelines_Light, HtmlSummary, JsonSummary, Latex, LatexSummary, lcov, MarkdownSummary, MarkdownSummaryGithub, MarkdownDeltaSummary, MHtml, PngChart, SonarQube, TeamCitySummary, TextSummary, TextDeltaSummary, Xml, XmlSummary
        verbosity: "Info" # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
        title: "Code Coverage" # Optional title.
        tag: "${{ github.run_number }}_${{ github.run_id }}" # Optional tag or build version.
        customSettings: "" # Optional custom settings (separated by semicolon). See: https://github.com/danielpalme/ReportGenerator/wiki/Settings.
        toolpath: "reportgeneratortool" # Default directory for installing the dotnet tool.
    
    - name: Upload Combined Coverage XML
      uses: actions/upload-artifact@v5
      with:
        name: coverage
        path: ${{ github.workspace }}/Cobertura.xml
        retention-days: 5
        
    - name: Publish Code Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: "Cobertura.xml"
        badge: true
        fail_below_min: false # just informative for now
        format: markdown
        hide_branch_rate: false
        hide_complexity: false
        indicators: true
        output: both
        thresholds: "10 30"

    - name: Upload Coverage Files
      run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

    # - name: Test Summary
    #   uses: test-summary/action@v2
    #   if: always()
    #   with:
    #     paths: ${{ github.workspace }}/**/TestResults/**/*
    #     output: test-summary.md

    # - name: Upload Test Result Files
    #   uses: actions/upload-artifact@v5
    #   with:
    #     name: test-summary
    #     path: test-summary.md
    #     retention-days: 5

         # Reemplaza tu step actual "Test Summary" con este:
    - name: Test Report
      uses: dorny/test-reporter@v2
      if: always()
      with:
        name: Test Results
        path: "**/*.trx"
        reporter: dotnet-trx
        only-summary: true
        use-actions-summary: true

    # - name: Publish Test Results
    #   uses: EnricoMi/publish-unit-test-result-action@v2
    #   if: always()
    #   with:
    #     files: "${{ github.workspace }}/**/*.trx"

    # - name: SonarQube End
    #   run: dotnet sonarscanner end /d:sonar.token=${{ secrets.SONAR_TOKEN }}
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # - name: Run Trivy vulnerability scanner
    #   uses: aquasecurity/trivy-action@0.28.0
    #   with:
    #     scan-type: "fs"
    #     exit-code: '1'
    #     ignore-unfixed: true
    #     vuln-type: 'os,library'
    #     format: 'sarif'
    #     output: 'trivy-results.sarif'
    #     severity: 'CRITICAL,HIGH'

    # - name: Upload Trivy scan results to GitHub Security tab
    #   uses: github/codeql-action/upload-sarif@v3
    #   with:
    #     sarif_file: 'trivy-results.sarif'
    
    - name: Publish Site
      working-directory: src/Web
      run: dotnet publish -c $BUILD_CONFIG --no-restore -o ../Publish
        
    - name: Upload Artifact
      uses: actions/upload-artifact@v5
      with:
        name: web_site
        path: ./src/Publish

  deploy:
      needs: build
      runs-on: ubuntu-latest
      steps:
      - name: Download Site
        uses: actions/download-artifact@v6
        with:
          name: web_site
          path: web_site
